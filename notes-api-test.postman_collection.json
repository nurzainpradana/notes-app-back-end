{
	"info": {
		"_postman_id": "f3450701-0b1b-4e30-aac3-74933b8680a4",
		"name": "Notes API Test with Env",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13566704"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Memastikan Response Header memiliki status code 201\r",
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Memastikan Response Header memiliki Content-Type dengan nilai application/json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).equals('application/json; charset=utf-8')\r",
							"});\r",
							"\r",
							"// Memastikan Body Response adalah object\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Pastikan body response memiliki properti dan nilai yang sesuai.\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('message');\r",
							"    pm.expect(responseJSON.message).to.equals('Catatan berhasil ditambahkan');\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('data');\r",
							"    pm.expect(responseJSON.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Pastikan data pada response body memiliki noteId dan nilainya tidak kosong\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJSON   = pm.response.json();\r",
							"    const { data } = responseJSON;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"\r",
							"    // Menyimpan noteId ke environment\r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Menguji apakah response code bernilai 200\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Pastikan header response Content-Type memiliki nilai application/json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"// Pastikan body response adalah object\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"// Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"    pm.expect(responseJSON).to.have.ownProperty('data');\r",
							"    pm.expect(responseJSON.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Memastikan data pada response body memiliki array notes dan terdapat minimal 1 item di dalamnya\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    const { data } = responseJSON;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes).lengthOf.at.least(1);\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// menguji apakah status code dari response bernilai 200\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// memastikan header response Content-Type bernilai application/json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"\r",
							"// Pastikan body response merupakan object\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('data');\r",
							"    pm.expect(responseJSON.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"// pastikan data pada response body memiliki properti note yang merupakan sebuah objek\r",
							"pm.test('response body data should contain note object', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    const { data } = responseJSON;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('note');\r",
							"    pm.expect(data.note).to.be.an('object');\r",
							"});\r",
							"\r",
							"// pastikan objek note di dalam data memiliki properti id, title, body dan tags dengan nilai yang sesuai\r",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    const { data: { note } } = responseJSON;\r",
							"\r",
							"    // \r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A';\r",
							"    const expectedTags = ['Android', 'Web'];\r",
							"    const expectedBody = 'Isi dari catatan A';\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id');\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('title');\r",
							"    pm.expect(note.title).to.equals(expectedTitle);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('tags');\r",
							"    pm.expect(note.tags).to.eql(expectedTags);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('body');\r",
							"    pm.expect(note.body).to.equals(expectedBody);\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Pastikan response memiliki status code 200\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Pastikan header response Content-Type memiliki nilai application/json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"// Pastikan body response adalah object\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Pastikan body response memiliki properti dan nilai yang sesuai\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('message');\r",
							"    pm.expect(responseJSON.message).to.equals('Catatan berhasil diperbaharui');\r",
							"});\r",
							"\r",
							"// Ketika mengakses catatan yang diperbaharui, pastikan catatan yang diperbaharui memiliki nilai terbaru\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"\r",
							"    // Buat request \r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then updated note should contain the latest data', () => {\r",
							"                const responseJSON = response.json();\r",
							"\r",
							"                const { data: { note }} = responseJSON;\r",
							"\r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Pastikan response status code bernilai 200\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Pastikan header response Content-Type memiliki nilai application/json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"\r",
							"});\r",
							"\r",
							"// Pastikan body response adalah objek\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"})\r",
							"\r",
							"// Pastikan body response memiliki properti dan nilai yang sesuai\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJSON).to.have.ownProperty('message');\r",
							"    pm.expect(responseJSON.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"// Ketika mengakses catatan yang dihapus, pastikan catatan yang dihapus tidak ditemukan\r",
							"pm.test('when request the deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error)\r",
							"        {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"\r",
							"                const responseJSON = response.json();\r",
							"                pm.expect(responseJSON.status).to.equals('fail');\r",
							"                pm.expect(responseJSON.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}